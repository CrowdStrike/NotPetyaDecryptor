# CrowdStrike, Inc. Copyright 2017.  All rights reserved.
# Author: Sebastian Eschweiler


import os
import timeit
from collections import defaultdict
import operator
import argparse
import logging

logging.basicConfig(filename="decryptPetya.log", format="%(asctime)s %(levelname)s: %(message)s", level=logging.INFO, filemode="w")

BYTES_PER_SECTOR = 512
MFTRECORD_LENGTH = 1024
STEP = MFTRECORD_LENGTH / BYTES_PER_SECTOR

KEYSTREAM_LENGTH = 4*1024*1024

STRICT_THRESH = 3.0
STRICT_FACTOR = 2.0

RELAXED_THRESH = 1.5
RELAXED_FACTOR = 1.2

UNKNOWN_BYTE = 0x58


class KeyStream:
	def __init__(self, relaxed=True):
		self.histo = defaultdict(lambda: defaultdict(float))
		self.factor = RELAXED_FACTOR if relaxed else STRICT_FACTOR
		self.threshold = RELAXED_THRESH if relaxed else STRICT_THRESH
		self.keystream = [None for _ in xrange(KEYSTREAM_LENGTH)]

	def updateInternal(self, elem, sector, offset, distro):
		index = (sector + offset) % KEYSTREAM_LENGTH

		if self.keystream[index] is not None:
			return

		for k, v in distro.items():
			k = ord(elem[offset]) ^ k
			self.histo[index][k] += v

		self.solveLocation(index)

	def updateDistro(self, elem, sector, localityDistro):
		for offset, distro in localityDistro.items():
			if len(elem) > offset:
				self.updateInternal(elem, sector, offset, distro)

	def solveLocation(self, index, thresh=STRICT_THRESH, factor=STRICT_FACTOR):
		if self.keystream[index] is not None or index not in self.histo or len(self.histo[index]) == 0:
			return
		srt = [x for x in sorted(self.histo[index].items(), key=operator.itemgetter(1), reverse=True)]
		if srt[0][1] < thresh:
			return
		if len(srt) == 1:
			self.keystream[index] = srt[0][0]
		elif srt[0][1] > srt[1][1] * factor:
			self.keystream[index] = srt[0][0]

		return

	def solve(self):
		for i in self.histo.keys():
			self.solveLocation(i, thresh=self.threshold, factor=self.factor)

	def decrypt(self, data, sector):
		guessWork = False
		res = []
		for i in xrange(len(data)):
			index = (sector + i) % KEYSTREAM_LENGTH
			if self.keystream[index] is None:
				guessWork = True
				logging.info("data index %d (keystream index %d) not solved" % (i, index))
				if index in self.histo:
					srt = [x for x in sorted(self.histo[index].items(), key=operator.itemgetter(1), reverse=True)]
					logging.info("potential values: ")
					logging.info("plaintext\tkey\tcertainty")
					for k, p in srt:
						logging.info("0x%02x\t%d\t%.4f" % (k ^ ord(data[i]), k, p))
					res.append(srt[0][0] ^ ord(data[i]))
				else:
					logging.warning("No potential plaintext bytes, using default value at index %d" % i)
					res.append(UNKNOWN_BYTE)
			else:
				res.append(self.keystream[index] ^ ord(data[i]))
		return (guessWork, "".join(map(chr, res)))


def readMftIntoKeyStream(mftFile, startSector, keystream):
	i = 0
	MftHisto = loadMftHisto(MftHistoPacked)
	with open(mftFile, "rb") as f:
		while True:
			element = f.read(MFTRECORD_LENGTH)
			if not element:
				break

			magic = element[0:4]
			if magic == "\x00\x00\x00\x00" or magic == "FILE" or magic == "BAAD":
				pass
			else:
				keystream.updateDistro(element, startSector + i, MftHisto)
			i += STEP

	return keystream

def decryptMft(mftFile, startSector, keystream, outFile, relaxed=False):
	i = 0
	f = open(mftFile, "rb")
	outFile = open(outFile, "wb")

	while True:
		offset = f.tell()
		element = f.read(MFTRECORD_LENGTH)
		if not element:
			break

		magic = element[0:4]

		if magic == "\x00\x00\x00\x00" or magic == "FILE" or magic == "BAAD":
			plain = element
		else:
			guessed, plain = keystream.decrypt(element, startSector + i)
			if guessed:
				logging.info("guessed while decrypting record %d at sector %d (offset 0x%x)" % (i / STEP, startSector + i, offset))
				if not relaxed:
					logging.info("marking record as BAD")
					plain = "BAAD" + "\x00"*(MFTRECORD_LENGTH - 4)

		outFile.write(plain)

		i += STEP

def loadMftHisto(d):
	H = {}
	for i in range(len(d)):
		if d[i] == -1: continue
		if type(d[i]) == float:
			H[i] = {0: d[i]}
		else:
			H[i] = dict(d[i])
	return H

def generateParser():
	parser = argparse.ArgumentParser()
	parser.add_argument("--mft", "-m", help="MFT filename", required=True)
	parser.add_argument("--strict", "-s", help="Do a strict decryption: only output MFT records that can be decrypted with high confidence. Others are marked as bad.", action="store_true")
	return parser

MftHistoPacked = [[[70,0.9996]],[[73,0.9996]],[[76,0.9996]],[[69,0.9996]],[[48,0.9996]],1.0,[[3,0.9996]],1.0,-1,-1,-1,[[200,0.5761]],0.9633,1.0,1.0,1.0,[[1,0.7251],[2,0.1063]],0.9948,[[1,0.2699],[2,0.5656]],0.9917,[[56,0.9996]],1.0,[[1,0.79],[3,0.2046]],1.0,-1,[[1,0.4472],[2,0.3617],[3,0.1849]],1.0,1.0,1.0,[[4,0.9996]],1.0,1.0,0.9972,0.9921,0.9737,1.0,1.0,1.0,0.9425,0.9998,-1,0.9998,1.0,1.0,-1,-1,[[0,0.1769],[1,0.1763],[2,0.1229],[3,0.1175],[4,0.1175],[5,0.1175],[6,0.1175]],1.0,-1,0.9901,0.7669,0.8822,0.9876,0.9876,1.0,1.0,[[16,0.9416]],0.9998,0.9998,0.9998,[[96,0.9573]],0.9939,1.0,1.0,0.995,0.9999,0.9995,1.0,0.9962,0.9999,0.9945,1.0,[[72,0.9663]],0.9972,1.0,1.0,[[24,0.9944]],1.0,0.9476,1.0,0.7189,-1,[[0,0.3655],[119,0.1156]],0.4415,-1,-1,-1,[[1,0.9416]],-1,-1,[[37,0.774]],-1,-1,-1,-1,[[1,0.994]],-1,-1,-1,-1,-1,-1,[[210,0.8982]],[[1,0.9941]],0.2409,-1,-1,-1,-1,-1,[[210,0.8958]],[[1,0.9942]],-1,[[0,0.809],[8,0.1064]],0.9399,0.9814,0.9613,0.9476,0.9472,0.9472,0.9967,0.9741,0.9956,0.9994,0.9994,0.9982,0.9983,0.9985,0.9934,0.9872,0.995,0.9984,-1,-1,0.9964,0.9967,0.9455,0.9938,0.9901,0.9975,0.9909,0.9977,0.9972,0.9977,0.3349,[[0,0.6451],[2,0.1271]],0.5492,-1,0.9242,0.9968,0.9775,0.9967,[[48,0.9332]],0.9981,0.9754,0.9982,-1,0.9509,0.9603,0.9981,0.9592,0.9981,0.9606,0.9981,0.9673,0.9981,-1,0.9982,[[90,0.5276],[82,0.1266]],0.9588,0.9816,0.9982,[[24,0.9568]],0.9981,[[1,0.9132]],0.9981,-1,-1,-1,0.9981,0.934,0.9842,[[1,0.6297]],0.9529,0.5538,0.7378,0.6263,[[0,0.5171],[57,0.1108]],-1,[[0,0.1152],[227,0.1401],[228,0.4412]],[[210,0.8228]],[[0,0.1002],[1,0.8983]],0.4173,[[0,0.4563],[1,0.139]],[[0,0.4716],[1,0.1606]],[[0,0.5119],[57,0.1121]],-1,[[0,0.1144],[227,0.1431],[228,0.4459]],[[210,0.8159]],[[1,0.8987]],[[0,0.4391],[164,0.1535]],[[0,0.5842],[60,0.1314]],-1,-1,-1,[[0,0.1121],[227,0.1412],[228,0.4378]],[[210,0.8205]],[[1,0.8994]],[[48,0.4913]],0.6418,0.5798,[[0,0.4448],[57,0.1223]],-1,[[227,0.1417],[228,0.4435]],[[210,0.8401]],[[1,0.9206]],0.9801,0.8438,0.9652,0.988,0.9835,0.9728,0.9632,0.9695,0.968,0.9172,0.9437,0.9879,0.9798,0.9722,0.9207,0.9711,[[0,0.2538],[32,0.7158]],0.8469,0.9756,[[0,0.78],[16,0.2098]],0.973,0.9715,0.9606,0.9699,[[8,0.1241],[12,0.5165]],-1,-1,0.9967,-1,0.9893,-1,0.9479,-1,0.993,[[0,0.2683],[69,0.1339],[79,0.1075]],0.9969,[[0,0.2791],[83,0.1055],[69,0.1064]],0.9747,[[0,0.1892],[126,0.6326]],0.9881,[[49,0.598]],0.9652,[[0,0.2601],[46,0.5945]],0.9957,[[0,0.3411],[80,0.1112],[68,0.1031],[72,0.1049]],0.9661,0.4403,0.9858,-1,0.9247,0.8536,0.9948,[[0,0.6393],[72,0.1098]],0.9759,0.818,0.9853,[[0,0.245],[1,0.1099],[48,0.5195]],0.9634,0.8901,0.992,[[0,0.4461],[32,0.1553]],0.8937,[[0,0.634],[2,0.139],[3,0.1081]],0.9428,0.7473,0.9794,0.9021,0.993,[[0,0.6962],[24,0.18]],0.9833,-1,0.9847,[[0,0.3718],[64,0.1168],[48,0.1431]],0.8537,0.784,0.9846,-1,0.9797,[[0,0.2836],[1,0.6197]],0.9748,-1,[[0,0.6018],[16,0.1276]],[[0,0.5308],[1,0.1455]],0.974,0.8175,0.8325,-1,[[0,0.8245],[1,0.1628]],[[0,0.4449],[48,0.1075],[16,0.1389]],[[0,0.6544],[16,0.1531]],0.7736,0.8289,0.4386,-1,-1,-1,0.569,0.645,0.7403,0.8252,0.5202,-1,-1,-1,-1,[[0,0.5858],[1,0.1142]],0.5896,0.8085,[[0,0.4966],[255,0.1009]],-1,[[0,0.2554],[210,0.5861]],-1,[[0,0.4791],[65,0.1477],[255,0.104]],[[0,0.6986],[1,0.1068]],[[0,0.6953],[255,0.1095]],0.7848,0.5642,[[0,0.4788],[228,0.177]],-1,-1,[[0,0.769],[255,0.1099]],[[0,0.784],[255,0.1071]],[[0,0.8077],[255,0.1085]],[[0,0.8835],[255,0.1003]],[[0,0.799],[130,0.106]],0.8447,[[0,0.7932],[71,0.1008]],0.8249,[[0,0.7701],[32,0.1221]],0.8786,0.902,0.8965,0.8972,0.9154,0.8515,0.894,-1,[[0,0.6881],[1,0.1624]],0.8752,0.8838,0.8273,0.9348,0.778,0.913,0.553,-1,[[0,0.4526],[97,0.1113]],0.9836,[[0,0.4153],[105,0.1113]],0.9368,[[0,0.3929],[99,0.1023]],0.9244,[[0,0.3649],[95,0.1088]],0.9692,[[0,0.4237],[101,0.1102],[111,0.1043]],0.9819,[[0,0.411],[115,0.1145],[95,0.1062]],0.9412,0.4287,0.9126,[[0,0.4268],[105,0.1049]],0.9635,0.5011,0.986,[[0,0.5052],[46,0.1052]],0.9627,[[0,0.5706],[111,0.1283]],0.9623,[[0,0.4323],[115,0.1134]],0.9482,0.5541,0.9815,0.5978,0.9666,0.5699,0.9665,[[0,0.4274],[128,0.108]],0.9283,0.6452,0.9823,0.556,0.965,0.6021,0.9656,0.4633,0.9262,0.6379,0.9828,0.6063,0.9713,0.5992,0.9557,0.5035,0.9538,0.7175,0.9819,0.6328,0.9614,0.6454,0.9603,0.5566,0.9226,0.7543,0.9756,0.6989,0.9571,0.6948,0.9539,0.5666,0.913,0.7807,0.9723,0.7289,0.9425,0.718,0.9429,0.6134,0.8817,0.7854,0.9671,0.7407,0.9367,0.7271,0.9212,0.6274,0.8721,0.8027,0.9678,0.7669,0.9368,0.7561,0.9282,0.6139,0.8442,0.771,0.9511,0.7489,0.9037,0.7148,0.9046,0.5733,0.828,0.776,0.9275,0.7603,0.8852,0.7366,0.8867,0.6055,0.7962,0.7525,0.9083,0.7401,0.8673,0.7033,0.855,0.6582,0.8366,0.7657,0.9186,0.7616,0.8696,0.7045,0.8563,0.6753,0.8417,0.788,0.9229,0.7855,0.877,0.7259,0.8645,0.6915,0.858,0.792,0.9194,0.7957,0.8669,0.7297,0.8597,0.7331,0.8702,0.8063,0.9312,0.8121,0.8839,0.7545,0.873,0.7532,0.8614,0.819,0.9279,0.8112,0.8919,-1,0.9901,0.7521,0.875,0.8359,0.9371,0.8385,0.9034,0.789,0.8899,0.7852,0.8834,0.848,0.9444,0.8407,0.9095,0.8042,0.8999,0.811,0.8933,0.8572,0.9503,0.8404,0.9269,0.8185,0.9189,0.807,0.9085,0.8639,0.9556,0.8629,0.9322,0.8289,0.9253,0.8096,0.8994,0.8644,0.9534,0.857,0.9206,0.8317,0.9168,0.8382,0.8918,0.8634,0.95,0.8551,0.9262,0.8321,0.9209,0.8069,0.9107,0.8758,0.9507,0.8476,0.9172,0.8445,0.918,0.836,0.8838,0.8653,0.9545,0.854,0.9294,0.8171,0.9195,0.8298,0.9042,0.9057,0.9523,0.8316,0.927,0.8562,0.9215,0.8289,0.9201,0.8818,0.9516,0.855,0.9306,0.8224,0.9168,0.8325,0.9116,0.9241,0.9564,0.8669,0.9358,0.8611,0.9209,0.8824,0.8798,0.9333,0.9584,0.8733,0.935,0.8592,0.9186,0.8552,0.9236,0.9294,0.9554,0.921,0.9226,0.8575,0.9127,0.8973,0.919,0.9209,0.9544,0.919,0.9215,0.8539,0.9031,0.8903,0.9244,0.9298,0.9591,0.9236,0.928,0.8397,0.9081,0.8695,0.9208,0.916,0.9489,0.9045,0.914,0.8591,0.8976,0.8961,0.9287,0.9184,0.9619,0.9198,0.9286,0.8503,0.9104,0.9078,0.9274,0.9261,0.9554,0.8959,0.9109,0.8563,0.892,0.9017,0.9359,0.9258,0.9621,0.915,0.9188,0.8663,0.8986,0.8927,0.9338,0.9232,0.9601,0.9013,0.9155,0.8628,0.8998,0.9095,0.9362,0.9222,0.9668,0.9009,0.9262,0.8673,0.9105,0.9135,0.9369,0.9193,0.9721,0.9242,0.951,0.8884,0.9421,0.9014,0.9458,0.9123,0.9737,0.9214,0.9523,0.8944,0.9404,0.8804,0.944,0.917,0.966,0.9196,0.9583,0.8939,0.9466,0.9051,0.9408,0.9168,0.9731,0.9071,0.96,0.8905,0.9486,0.9022,0.9628,0.9147,0.9751,0.9129,0.9604,0.8874,0.9497,0.9044,0.9557,0.9169,0.9744,0.902,0.9641,0.9001,0.9536,0.9159,0.9628,0.9304,0.9782,0.9279,0.9627,0.9062,0.9574,0.9012,0.952,0.9268,0.9673,0.9239,0.9551,0.9024,0.945,0.9125,0.9449,0.9307,0.9665,0.9204,0.9552,0.8975,0.9475,0.9135,0.956,0.9306,0.9741,0.9251,0.9507,0.8966,0.9417,0.9178,0.9561,0.9283,0.9718,0.9257,0.9472,0.8936,0.9381,0.91,0.9463,0.9266,0.9644,0.9256,0.9438,0.8965,0.9303,0.9224,0.9564,0.9333,0.9668,0.9325,0.9499,0.8923,0.9377,0.9212,0.9593,0.9343,0.9693,0.9267,0.9465,0.9079,0.9371,0.9277,0.9548,0.9306,0.9684,0.9297,0.9519,0.9076,0.9416,0.924,0.9607,0.9373,0.9694,0.9396,0.9592,0.9162,0.9472,0.9277,0.9632,0.9406,0.9745,0.9429,0.9647,0.9224,0.953,0.9217,0.9621,0.9426,0.9765,0.9429,0.9684,0.929,0.9611,0.9282,0.9627,0.9406,0.9756,0.9453,0.967,0.9269,0.9601,0.9418,0.9706,0.9495,0.9789,0.9528,0.974,0.9389,0.9622,0.9446,0.9669,0.9504,0.9753,0.9513,0.9695,0.9391,0.9616,0.9383,0.9646,0.9542,0.9763,0.953,0.9699,0.9395,0.9625,0.9401,0.9656,0.9475,0.9717,0.9504,0.9654,0.9291,0.9581,0.9399,0.9636,0.9498,0.9767,0.9462,0.9683,0.9383,0.9608,0.9466,0.9692,0.9527,0.9784,0.9546,0.9705,0.9374,0.9632,0.9425,0.9725,0.9679,0.9835,0.9538,0.9735,0.95,0.9661,0.941,0.9637,0.9628,0.9753,0.9622,0.9679,0.9375,0.9613,0.957,0.9687,0.9673,0.9788,0.9648,0.9726,0.9537,0.9665,0.955,0.9694,0.9697,0.9821,0.9717,0.9736,0.9514,0.9663,0.9497,0.9691,0.9708,0.9793,0.9646,0.9733,0.9605,0.9669,0.9564,0.9583,0.9635,0.9764,0.9654,0.9705,0.9567,0.9655,0.9599,0.9661,0.9736,0.9829,0.9692,0.9795,0.9682,0.9724,0.9626,0.9627,0.9709,0.9792,0.9679,0.9791,0.97,0.9764,0.9557,0.9647,0.9749,0.9837,0.9675,0.9784,0.9721,0.979,0.9572,0.9651,0.9642,0.9722,0.9656,0.9736,0.9652,0.9725,0.9674,0.974,0.9764,0.9839,0.9733,0.9806,0.9763,0.9811,0.9672,0.9775,0.9732,0.9814,0.971,0.9805,0.9721,0.9805,0.9731,0.9826,0.9779,0.9836,0.9758,0.9846,0.9782,0.984,0.9736,0.9805,0.9794,0.9833,0.9775,0.9825,0.9818,0.9839,0.9806,0.9865,0.9856,0.9876,0.9818,0.9874,0.9872,0.9881,0.9811,0.9866,0.9863,0.988,0.9843,0.9873,0.9869,0.9877,0.9794,0.9842,0.9842,0.985,0.982,0.9871,0.9871,0.9876,0.9876,0.9876,0.9876,0.9876,0.9876,0.9876,-1,0.9901]


if __name__ == "__main__":
	startTime = timeit.default_timer()

	parser = generateParser()
	args = parser.parse_args()

	relaxed = True
	if args.strict:
		print "Using strict mode, only output MFT records that can be decrypted with high confidence. Others are marked as bad."
		relaxed = False
	else:
		print "Using relaxed mode, store MFT records even if the confidence is low. The most probable byte is written. Might result in invalid records."

	keystream = KeyStream(relaxed=relaxed)

	print "parsing MFT"
	keystream = readMftIntoKeyStream(args.mft, 0, keystream)
	keystream.solve()

	print "decrypting MFT"
	if relaxed:
		decryptMft(args.mft, 0, keystream, args.mft + ".decrypted_relaxed", True)
	else:
		decryptMft(args.mft, 0, keystream, args.mft + ".decrypted_strict")

	elapsed = timeit.default_timer() - startTime
	print "Done, have a nice day :). Runtime %d seconds." % (elapsed)
